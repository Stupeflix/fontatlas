
#ifndef OSG_STUPEFLIX_FONTATLAS__
# define OSG_STUPEFLIX_FONTATLAS__

namespace osgStupeflix {

class FontAtlas {
public:

    // Default generation values.
    static const std::size_t DEFAULT_CHARACTER_RESOLUTION;
    static const std::size_t DEFAULT_PADDING;
    static const std::size_t DEFAULT_IMG_SIZE;

    // Generate all atlases and meta-data files for the given font.
    static void generateFontData(std::string const &font_path,
        std::size_t character_resolution = DEFAULT_CHARACTER_RESOLUTION,
        std::size_t padding = DEFAULT_PADDING,
        std::size_t img_size = DEFAULT_IMG_SIZE,
        bool verbose = false);

    // Generate a meta-data file which will be used by the generateFromChar
    // function to generate only one atlas and json file for ranges of
    // characters.
    static void generateMetaData(std::string const &font_path,
        std::size_t character_resolution = DEFAULT_CHARACTER_RESOLUTION,
        std::size_t padding = DEFAULT_PADDING,
        std::size_t img_size = DEFAULT_IMG_SIZE,
        bool verbose = false);

    // Generate one atlas from the given char.
    // The path of the meta-data to use, the output png and json is the same as
    // the input font.
    // Note: unsigned short is used instead of wchar_t because swig doesnt
    // support the typedef.
    static unsigned short generateFromChar(unsigned short c,
        std::string const &font_path,
        std::size_t character_resolution = DEFAULT_CHARACTER_RESOLUTION,
        std::size_t padding = DEFAULT_PADDING,
        std::size_t img_size = DEFAULT_IMG_SIZE);

    // Return the kerning value between `first` and `second` char. You must give the
    // `font_path` to the font and the `size` of the characters as well.
    static float getKerning(unsigned short first,
        unsigned short second,
        std::string const &font_path,
        std::size_t character_resolution = DEFAULT_CHARACTER_RESOLUTION);

};

}

#endif